"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ytdl_core_1 = __importDefault(require("ytdl-core"));
const discord_js_1 = require("discord.js");
const discord_akairo_1 = require("discord-akairo");
class CommandName extends discord_akairo_1.Command {
    constructor() {
        super('play', {
            aliases: ['play'],
            description: {
                content: 'The experimental play command for music.'
            },
            category: 'Music',
            ratelimit: 0,
            channel: 'guild',
            args: [
                {
                    id: 'req',
                    type: 'string',
                    match: 'content',
                    prompt: {
                        start: (msg) => `${msg.author}, Please provide a YouTube URL to play.`
                    }
                }
            ]
        });
    }
    async exec(message, { req }) {
        const time = (x) => Math.floor(x / 60) + ':' + ('0' + Math.floor(x % 60)).slice(-2);
        // Checks if the member is in a voice channel
        if (!message.member.voice.channel)
            return message.util.send("Please join a voice channel before playing a song.");
        // Validates the YouTube URL
        if (!await ytdl_core_1.default.validateURL(req))
            return message.util.send('Please provide a valid YouTube URL.');
        // Retrieve the info of the video
        let { title, length_seconds } = await ytdl_core_1.default.getInfo(req);
        // Gets the data of the server
        let data = this.client.active.get(message.guild.id) || {};
        // Check/Make a connection to the voice channel
        if (!data.connections)
            data.connection = await message.member.voice.channel.join();
        // Check/Make a queue for the server
        if (!data.queue)
            data.queue = [];
        // Add the server id to the data object
        data.guildId = message.guild.id;
        // Create basic queue data
        data.queue.push({
            songTitle: title,
            reqTag: message.author.tag,
            reqAvatar: message.author.displayAvatarURL,
            url: req,
            duration: time(length_seconds),
            thumbnail: `http://img.youtube.com/vi/${ytdl_core_1.default.getVideoID(req)}/hqdefault.jpg`,
            ch: message.channel.id
        });
        // If no song is currently playing
        if (!data.dispatcher) {
            // Play the song
            this.play(this.client, this.client.active, data);
        }
        // Otherwise add it to the queue
        else {
            // Tell the user the song has been added to the queue
            message.util.send(new discord_js_1.MessageEmbed()
                .setTitle("Added song to the queue")
                .addField('Title:', title)
                .addField("Duration:", time(length_seconds))
                .addField('URL:', data.queue[0].url)
                .setFooter(`Requested by: ${data.queue[0].reqTag}`, data.queue[0].reqAvatar)
                .setThumbnail(`http://img.youtube.com/vi/${ytdl_core_1.default.getVideoID(req)}/hqdefault.jpg`)
                .setTimestamp()
                .setColor('#fcc419'));
            // Delete the user's message
            //message.delete();
        }
        // Update the data for the current server
        this.client.active.set(message.guild.id, data);
    }
    // 
    // Define the function that actually plays the song.
    async play(client, active, data) {
        // Tell the user the bot is starting to play the song
        //@ts-ignore
        this.client.channels.cache.get(data.queue[0].ch).send(new discord_js_1.MessageEmbed()
            .setTitle("Playing song")
            .addField('Title:', data.queue[0].songTitle)
            .addField("Duration:", data.queue[0].duration)
            .addField('URL:', data.queue[0].url)
            .setFooter(`Requested by: ${data.queue[0].reqTag}`, data.queue[0].reqAvatar)
            .setThumbnail(data.queue[0].thumbnail)
            .setTimestamp()
            .setColor('#63e6be'));
        // Play the song
        data.dispatcher = await data.connection.play(ytdl_core_1.default(data.queue[0].url, { filter: 'audioonly' }));
        // Once the song is finished play the next on in queue or leave the voice channel
        data.dispatcher.once('finish', async () => {
            // Retrieves the server's music information
            let fetched = active.get(data.guildId);
            // Removes the finished song from the queue array
            fetched.queue.shift();
            // If there are songs left in the queue, play the next song in queue
            if (fetched.queue.length > 0) {
                // Overwrite the old guild data with the new one
                active.set(data.guildId, fetched);
                // Play next song using updated server information
                this.play(this.client, active, fetched);
            }
            // Otherwise delete the data and leave the voice channel
            else {
                // Delete the guild's data
                active.delete(data.guildId);
                // Leave the voice channel 
                this.client.guilds.cache.get(data.guildId).me.voice.channel.leave();
            }
        });
    }
}
exports.default = CommandName;
//# sourceMappingURL=data:application/json;base64,